/******************************************************************************
Robot sensoring- IN514
MAAREF Mehdi
BREAU-TRENIT Antoine
CDI

*******************************************************************************/

#include <iostream>
#include <stdlib.h>
#include <stdio.h>
using namespace std;

int main() {
    // This array can store upto 400 elements (20x20x3)
    float maps[3][20][20] = {
                            {//position 0 and 1 values (2,5)--> initial position
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},

                            }, 
                            {//human sensoring 0:far / 0.3:close/ 0.6: too close/ 1: human
                                {0, 0, 0.3, 0.3, 0.3, 0.3, 0.3, 0.6, 1, 0.6, 0.3, 0, 0, 0, 0, 0, 0, 0.3, 0.6, 1},
                                {0, 0, 0.3, 0.6, 0.6, 0.6, 0.3, 0.6, 0.6, 0.6, 0.3, 0, 0, 0, 0, 0, 0, 0.3, 0.6, 0.6},
                                {0, 0, 0.3, 0.6, 1, 0.6, 0.3, 0.3, 0.3, 0.3, 0.3, 0, 0, 0, 0, 0, 0, 0.3, 0.3, 0.3},
                                {0, 0, 0.3, 0.6, 0.6, 0.6, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0.3, 0.3, 0.3, 0.3, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0.3, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0.3, 0.3},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0.3, 0.6, 0.6, 0.6, 0.3, 0, 0.3, 0.6, 0.6, 0.6, 0.3},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0.3, 0.6, 1, 0.6, 0.3, 0, 0.3, 0.6, 1, 0.6, 0.3},//only one human cell remaining 
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0.3, 0.6, 0.6, 0.6, 0.3, 0, 0.3, 0.6, 0.6, 0.6, 0.3},
                                {0, 0, 0, 0, 0, 0, 0, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0.3, 0.3},
                                {0, 0, 0, 0, 0, 0, 0, 0.3, 0.6, 0.6, 0.6, 0.3, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0.3, 0.6, 1, 0.6, 0.3, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0.3, 0.6, 0.6, 0.6, 0.3, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0.3, 0.3, 0.3, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0.3, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3},
                                {0, 0, 0, 0, 0, 0, 0.3, 0.6, 0.6, 0.6, 0.3, 0, 0.3, 0.6, 0.6, 0.6, 0.3, 0.3, 0.6, 0.6},
                                {0, 0, 0, 0, 0, 0, 0.3, 0.6, 1, 0.6, 0.3, 0, 0.3, 0.6, 1, 0.6, 0.3, 0.3, 0.6, 1},
                            },   
                            {//walls
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5, 0.5, 0.5, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5, 1, 0.5, 0, 0.5, 0.5},
                                {0, 0, 0.5, 0.5, 0.5, 0, 0, 0, 0, 0, 0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 1},
                                {0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1, 0.5, 0, 0.5, 1},
                                {0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 1, 1, 1, 1, 1, 0.5, 1, 0.5, 0, 0.5, 1},
                                {0, 0, 0.5, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1, 0.5, 0, 0.5, 1},
                                {0, 0, 0.5, 1, 0.5, 1, 1, 1, 0.5, 0, 0, 0, 0, 0, 0.5, 0.5, 0.5, 0, 0.5, 1},
                                {0, 0, 0.5, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0, 0, 0, 0.5, 0.5},
                                {0, 0, 0.5, 1, 0.5, 1, 1, 1, 0.5, 1, 1, 1, 1, 1, 0.5, 0, 0, 0, 0, 0},
                                {0, 0, 0.5, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0, 0, 0.5, 0.5, 0.5},
                                {0, 0, 0.5, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0, 0, 0.5, 1, 0.5},
                                {0, 0, 0.5, 1, 0.5, 1, 1, 1, 0.5, 0.5, 1, 1, 1, 1, 0.5, 0, 0, 0.5, 1, 0.5},
                                {0, 0, 0.5, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0, 0, 0.5, 1, 0.5},
                                {0, 0, 0.5, 1, 0.5, 0, 0.5, 0.5, 0.5, 0, 0.5, 0.5, 0.5, 0, 0, 0.5, 0.5, 0.5, 1, 0.5},
                                {0, 0, 0.5, 1, 0.5, 0, 0.5, 1, 0.5, 0, 0, 0.5, 1, 0.5, 0, 0.5, 1, 0.5, 1, 0.5},
                                {0, 0, 0.5, 1, 0.5, 0, 0.5, 1, 0.5, 0, 0, 0.5, 1, 0.5, 0, 0.5, 1, 0.5, 0.5, 0.5},
                                {0, 0, 0.5, 1, 0.5, 0, 0.5, 1, 0.5, 0, 0, 0.5, 1, 0.5, 0, 0.5, 1, 0.5, 0, 0},
                                {0, 0, 0.5, 1, 0.5, 0, 0.5, 1, 0.5, 0, 0, 0.5, 1, 0.5, 0, 0.5, 1, 0.5, 0, 0},
                                {0, 0, 0.5, 1, 0.5, 0, 0.5, 1, 0.5, 0, 0, 0.5, 0.5, 0.5, 0, 0.5, 1, 0.5, 0, 0},

                            }, 
                            
                            };

    // Displaying the values with proper index.
    /*
    cout << "displaying the values with the proper index" << endl; 
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 20; ++j) {
            for (int k = 0; k < 20; ++k) {
                cout << "test[" << i << "][" << j << "][" << k << "] = " << maps[i][j][k] << endl;
                
                
            }
        }
    }
    */
    
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 20; ++j) {
            for (int k = 0; k < 20; ++k) {
                
                cout   <<  maps[i][j][k] << "\t" ;
                
                
            }
            cout << endl;
        }
    }                     
                            

    



    return 0;
}
